{"ast":null,"code":"import { mockUsers } from \"./mockUsers\";\n// Mock Companies\nexport const mockCompanies = [{\n  id: \"hilabs\",\n  name: \"HiLabs\",\n  role: \"Data Science\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"data\",\n  logo: \"\"\n}, {\n  id: \"google\",\n  name: \"Google\",\n  role: \"Software Engineer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n}, {\n  id: \"amazon\",\n  name: \"Amazon\",\n  role: \"Operations Manager\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"flipkart\",\n  name: \"Flipkart\",\n  role: \"SDE\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n}, {\n  id: \"meesho\",\n  name: \"Meesho\",\n  role: \"Product Manager\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"product\",\n  logo: \"\"\n}, {\n  id: \"groww\",\n  name: \"Groww\",\n  role: \"Quant Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"quant\",\n  logo: \"\"\n}, {\n  id: \"uber\",\n  name: \"Uber\",\n  role: \"Backend Developer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n}, {\n  id: \"deloitte\",\n  name: \"Deloitte\",\n  role: \"Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"microsoft\",\n  name: \"Microsoft\",\n  role: \"Cloud Engineer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n},\n// New mock companies\n{\n  id: \"infosys\",\n  name: \"Infosys\",\n  role: \"System Engineer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"core\",\n  logo: \"\"\n}, {\n  id: \"tcs\",\n  name: \"TCS\",\n  role: \"Consultant\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"wipro\",\n  name: \"Wipro\",\n  role: \"Data Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"data\",\n  logo: \"\"\n}, {\n  id: \"adani\",\n  name: \"Adani Group\",\n  role: \"Project Engineer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"core\",\n  logo: \"\"\n}, {\n  id: \"reliance\",\n  name: \"Reliance Industries\",\n  role: \"Business Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"ola\",\n  name: \"Ola Cabs\",\n  role: \"AI Engineer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"data\",\n  logo: \"\"\n}, {\n  id: \"zomato\",\n  name: \"Zomato\",\n  role: \"Operations Lead\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"byjus\",\n  name: \"BYJU'S\",\n  role: \"EdTech Associate\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"paytm\",\n  name: \"Paytm\",\n  role: \"FinTech Developer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n}, {\n  id: \"swiggy\",\n  name: \"Swiggy\",\n  role: \"Logistics Manager\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}];\nconst candidateNames = [\n// Cricket and famous personalities (existing)\n\"Virat Kohli\", \"Rohit Sharma\", \"MS Dhoni\", \"Sachin Tendulkar\", \"Yuvraj Singh\", \"Sourav Ganguly\", \"Rahul Dravid\", \"Jasprit Bumrah\", \"Hardik Pandya\", \"Ravindra Jadeja\", \"KL Rahul\", \"Shikhar Dhawan\", \"Rishabh Pant\", \"Suryakumar Yadav\", \"Mohammed Shami\", \"Bhuvneshwar Kumar\", \"Harbhajan Singh\", \"Zaheer Khan\", \"Anil Kumble\", \"VVS Laxman\", \"Gautam Gambhir\", \"Ajinkya Rahane\", \"Cheteshwar Pujara\", \"Ishant Sharma\", \"Navdeep Saini\", \"Narendra Modi\", \"Yogi Adityanath\", \"Baba Ramdev\", \"The Great Khali\", \"Kapil Dev\", \"Sunil Gavaskar\", \"Mohinder Amarnath\", \"Syed Kirmani\", \"Kedar Jadhav\", \"Prithvi Shaw\", \"Sanju Samson\", \"Dinesh Karthik\", \"Manish Pandey\", \"Robin Uthappa\", \"Parthiv Patel\", \"Sreesanth\",\n// Taarak Mehta Ka Ooltah Chashmah characters\n\"Jethalal Gada\", \"Taarak Mehta\", \"Daya Gada\", \"Champaklal Gada\", \"Babita Iyer\", \"Iyer\", \"Aatmaram Bhide\", \"Madhavi Bhide\", \"Sonalika Sonu Bhide\", \"Popatlal Pandey\", \"Dr. Hathi\", \"Komal Hathi\", \"Goli Hathi\", \"Roshan Singh Sodhi\", \"Roshan Kaur Sodhi\", \"Gogi Sodhi\", \"Abdul\", \"Patrakaar Popatlal\", \"Rita Reporter\", \"Bagha\", \"Natu Kaka\", \"Baawri\", \"Sodhi\", \"Anjali Mehta\", \"Tapu\", \"Gogi\", \"Pinku\", \"Bapuji\"];\nconst branches = [\"B.Tech. (Ceramic Engineering)\", \"IDD (Ceramic Engineering)\", \"B.Tech. (Chemical Engineering)\", \"B.Tech. (Civil Engineering)\", \"IDD (Civil Engineering)\", \"B.Tech. (Computer Science and Engineering)\", \"IDD (Computer Science and Engineering)\", \"B.Tech. (Electrical Engineering)\", \"IDD (Electrical Engineering)\", \"B.Tech. (Electronics Engineering)\", \"B.Tech. (Mechanical Engineering)\", \"IDD (Mechanical Engineering)\", \"B.Tech. (Metallurgical & Materials Engineering)\", \"IDD (Metallurgical & Materials Engineering)\", \"B.Tech. (Mining Engineering)\", \"IDD (Mining Engineering)\", \"B.Tech. (Pharmaceutical Engineering & Technology)\", \"IDD (Pharmaceutical Engineering & Technology)\", \"IDD (Engineering Physics)\", \"IDD (Biochemical Engineering)\", \"IDD (Biomedical Engineering)\", \"IDD (Materials Science and Technology)\", \"IDD (Decision Science and Engineering)\", \"B.Arch. (Architecture)\"];\nfunction randomEnrollment(idx) {\n  return 21112000 + idx + String.fromCharCode(97 + idx % 5);\n}\nfunction getRandomBranch() {\n  return branches[Math.floor(Math.random() * branches.length)];\n}\n\n// Each candidate can have any number of shortlists (1 to all companies)\nfunction getRandomShortlists(companyIds) {\n  const n = Math.floor(Math.random() * companyIds.length) + 1;\n  const shuffled = [...companyIds].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, n);\n}\nconst companyIds = mockCompanies.map(c => c.id);\n\n// Mahabharata characters to add as candidates\nconst mahabharataNames = [\"Arjuna\", \"Bhima\", \"Yudhishthira\", \"Nakula\", \"Sahadeva\", \"Karna\", \"Draupadi\", \"Duryodhana\", \"Shakuni\", \"Krishna\", \"Abhimanyu\", \"Ghatotkacha\", \"Ashwatthama\", \"Bhishma\", \"Dronacharya\", \"Vidura\", \"Kunti\", \"Gandhari\", \"Subhadra\", \"Ekalavya\"];\nconst mahabharataCandidates = mahabharataNames.map((name, idx) => {\n  const id = `candM${idx + 1}`;\n  const enrollment = `21113M${(idx + 1).toString().padStart(2, '0')}`;\n  const branch = branches[Math.floor(Math.random() * branches.length)];\n  // Give each 2-4 random shortlists from mockCompanies only for now\n  // We'll update this after expired companies are created\n  const n = 2 + Math.floor(Math.random() * 3);\n  const shuffled = [...companyIds].sort(() => 0.5 - Math.random());\n  const shortlistedIn = shuffled.slice(0, n);\n  // Extract course from branch name\n  let course = \"B.Tech\";\n  if (branch.includes(\"IDD\")) {\n    course = \"IDD\";\n  } else if (branch.includes(\"M.Tech\")) {\n    course = \"M.Tech\";\n  } else if (branch.includes(\"Ph.D\")) {\n    course = \"Ph.D\";\n  } else if (branch.includes(\"B.Arch\")) {\n    course = \"B.Arch\";\n  }\n  return {\n    id,\n    name,\n    enrollment,\n    branch,\n    course,\n    shortlistedIn\n  };\n});\nexport const mockCandidates = [...candidateNames.map((name, idx) => {\n  const id = `cand${idx + 1}`;\n  const enrollment = randomEnrollment(idx);\n  const branch = branches[Math.floor(Math.random() * branches.length)];\n  const shortlistedIn = getRandomShortlists(companyIds);\n  // Extract course from branch name\n  let course = \"B.Tech\";\n  if (branch.includes(\"IDD\")) {\n    course = \"IDD\";\n  } else if (branch.includes(\"M.Tech\")) {\n    course = \"M.Tech\";\n  } else if (branch.includes(\"Ph.D\")) {\n    course = \"Ph.D\";\n  } else if (branch.includes(\"B.Arch\")) {\n    course = \"B.Arch\";\n  }\n  return {\n    id,\n    name,\n    enrollment,\n    branch,\n    course,\n    shortlistedIn\n  };\n}), ...mahabharataCandidates];\n\n// Companies only for expired bets (define after candidates)\nexport const mockExpiredCompanies = [{\n  id: \"squarepoint1\",\n  name: \"SquarePoint Capital\",\n  role: \"Graduate Software Developer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n}, {\n  id: \"squarepoint2\",\n  name: \"SquarePoint Capital\",\n  role: \"Infrastructure Engineer\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"sde\",\n  logo: \"\"\n}, {\n  id: \"squarepoint3\",\n  name: \"SquarePoint Capital\",\n  role: \"Desk Quant Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"quant\",\n  logo: \"\"\n}, {\n  id: \"goldmansachs\",\n  name: \"Goldman Sachs\",\n  role: \"Quantitative Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"quant\",\n  logo: \"\"\n}, {\n  id: \"barclays\",\n  name: \"Barclays\",\n  role: \"Risk Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"quant\",\n  logo: \"\"\n}, {\n  id: \"jpmorgan\",\n  name: \"JP Morgan\",\n  role: \"Investment Banking Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"bain\",\n  name: \"Bain & Company\",\n  role: \"Associate Consultant\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"bostonconsulting\",\n  name: \"Boston Consulting Group\",\n  role: \"Consultant\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}, {\n  id: \"mckinsey\",\n  name: \"McKinsey & Company\",\n  role: \"Business Analyst\",\n  shortlist: [],\n  candidates: [],\n  liveEventSection: \"misc\",\n  logo: \"\"\n}];\nconst expiredCompanyIds = mockExpiredCompanies.map(c => c.id);\n\n// Add expired companies to the main companies array so they appear in the system\nmockCompanies.push(...mockExpiredCompanies);\n\n// Update mahabharata candidates to include expired companies in their shortlists\nmahabharataCandidates.forEach(candidate => {\n  const allCompanyIds = [...companyIds, ...expiredCompanyIds];\n  const n = 2 + Math.floor(Math.random() * 3);\n  const shuffled = [...allCompanyIds].sort(() => 0.5 - Math.random());\n  candidate.shortlistedIn = shuffled.slice(0, n);\n});\n\n// Update company shortlists to include all candidates who have that company in their shortlistedIn\nmockCompanies.forEach(company => {\n  company.shortlist = mockCandidates.filter(c => c.shortlistedIn.includes(company.id)).map(c => c.id);\n});\nmockExpiredCompanies.forEach(company => {\n  company.shortlist = mockCandidates.filter(c => c.shortlistedIn.includes(company.id)).map(c => c.id);\n});\n\n// Ensure every expired company has at least 4-7 candidates shortlisted\nmockExpiredCompanies.forEach(company => {\n  let currentShortlist = company.shortlist;\n  const needed = 4 + Math.floor(Math.random() * 4); // 4-7\n  if (currentShortlist.length < needed) {\n    // Find candidates not already in shortlist\n    const notShortlisted = mockCandidates.filter(c => !currentShortlist.includes(c.id));\n    // Shuffle and pick as many as needed\n    const toAdd = notShortlisted.sort(() => 0.5 - Math.random()).slice(0, needed - currentShortlist.length);\n    company.shortlist = [...currentShortlist, ...toAdd.map(c => c.id)];\n  }\n});\n\n// Sample expired bets (with verdict) - will be replaced below\nexport let mockExpiredBets = [];\n\n// Use leaderboard (mockUsers) to distribute winnings/losings for expired bets\nconst leaderboardUsers = mockUsers.slice(0, 10); // Top 10 for demo\nconst verdicts = [\"selected\", \"not selected\"];\nleaderboardUsers.forEach((user, i) => {\n  // Each user bets on 1-2 expired companies, random candidate from shortlist\n  const companies = [mockExpiredCompanies[i % mockExpiredCompanies.length]];\n  companies.forEach(company => {\n    const shortlist = company.shortlist;\n    if (shortlist.length === 0) return;\n    const candidateId = shortlist[Math.floor(Math.random() * shortlist.length)];\n    const verdict = verdicts[i % 2];\n    const amount = 10000 + i * 5000;\n    mockExpiredBets.push({\n      userId: user.id,\n      candidateId,\n      companyId: company.id,\n      type: \"for\",\n      amount,\n      stake: `${(1.2 + 0.1 * i).toFixed(2)}x`,\n      status: \"expired\",\n      verdict\n    });\n  });\n});\n// Add some Mahabharata candidates as selected in mockExpiredBets\nconst selectedMahabharata = mahabharataCandidates.slice(0, 6); // First 6 selected\nselectedMahabharata.forEach((cand, i) => {\n  mockExpiredBets.push({\n    userId: `21075M${i + 1}`,\n    candidateId: cand.id,\n    companyId: mockExpiredCompanies[i % mockExpiredCompanies.length].id,\n    type: \"for\",\n    amount: 3500 + i * 200,\n    stake: `${(1.2 + 0.1 * i).toFixed(2)}x`,\n    status: \"expired\",\n    verdict: \"selected\"\n  });\n});\n\n// Add some non-Mahabharata candidates as 'not selected' in expired bets if they are shortlisted in expired companies\nconst nonMahabharataCandidates = mockCandidates.filter(c => !c.id.startsWith('candM'));\nconst extraNotSelected = [{\n  name: 'Rohit Sharma',\n  id: 'cand2'\n}, {\n  name: 'Virat Kohli',\n  id: 'cand1'\n}, {\n  name: 'MS Dhoni',\n  id: 'cand3'\n}, {\n  name: 'Jethalal Gada',\n  id: 'cand41'\n}, {\n  name: 'Narendra Modi',\n  id: 'cand25'\n}, {\n  name: 'Babita Iyer',\n  id: 'cand45'\n}];\nextraNotSelected.forEach((cand, i) => {\n  // Find an expired company where this candidate is shortlisted\n  const company = mockExpiredCompanies.find(c => c.shortlist.includes(cand.id));\n  if (company) {\n    mockExpiredBets.push({\n      userId: `21075E${i + 1}`,\n      candidateId: cand.id,\n      companyId: company.id,\n      type: \"for\",\n      amount: 2000 + i * 500,\n      stake: `${(1.15 + 0.07 * i).toFixed(2)}x`,\n      status: \"expired\",\n      verdict: \"not selected\"\n    });\n  }\n});\n\n// Ensure multiple candidates are selected for each expired company\nmockExpiredCompanies.forEach(company => {\n  const shortlist = company.shortlist;\n  if (shortlist.length < 2) return;\n  // Pick 2-3 unique candidates from shortlist\n  const nSelected = Math.min(3, Math.max(2, Math.floor(Math.random() * 3) + 2, shortlist.length));\n  const shuffled = [...shortlist].sort(() => 0.5 - Math.random());\n  const selectedCands = shuffled.slice(0, nSelected);\n  selectedCands.forEach(cid => {\n    // Check if a bet already exists for this candidate/company\n    let bet = mockExpiredBets.find(b => b.companyId === company.id && b.candidateId === cid);\n    if (bet) {\n      bet.verdict = 'selected';\n    } else {\n      mockExpiredBets.push({\n        userId: `21075S${cid}`,\n        candidateId: cid,\n        companyId: company.id,\n        type: \"for\",\n        amount: 2500 + Math.floor(Math.random() * 2000),\n        stake: `${(1.15 + Math.random() * 0.5).toFixed(2)}x`,\n        status: \"expired\",\n        verdict: \"selected\"\n      });\n    }\n  });\n});\n\n// Sample Bets\nexport const mockBets = [{\n  userId: \"21075001\",\n  candidateId: \"cand1\",\n  companyId: \"hilabs\",\n  type: \"for\",\n  amount: 2000,\n  stake: \"1.29x\",\n  status: \"active\"\n}, {\n  userId: \"21075001\",\n  candidateId: \"cand2\",\n  companyId: \"google\",\n  type: \"against\",\n  amount: 1500,\n  stake: \"2.10x\",\n  status: \"active\"\n}, {\n  userId: \"21075002\",\n  candidateId: \"cand3\",\n  companyId: \"amazon\",\n  type: \"for\",\n  amount: 1000,\n  stake: \"1.75x\",\n  status: \"expired\"\n}, {\n  userId: \"21075003\",\n  candidateId: \"cand4\",\n  companyId: \"flipkart\",\n  type: \"for\",\n  amount: 2500,\n  stake: \"1.35x\",\n  status: \"active\"\n}, {\n  userId: \"21075004\",\n  candidateId: \"cand5\",\n  companyId: \"meesho\",\n  type: \"against\",\n  amount: 1800,\n  stake: \"3.44x\",\n  status: \"active\"\n}, {\n  userId: \"21075005\",\n  candidateId: \"cand6\",\n  companyId: \"groww\",\n  type: \"for\",\n  amount: 2200,\n  stake: \"1.49x\",\n  status: \"expired\"\n}, {\n  userId: \"21075006\",\n  candidateId: \"cand7\",\n  companyId: \"uber\",\n  type: \"for\",\n  amount: 1700,\n  stake: \"1.80x\",\n  status: \"active\"\n}, {\n  userId: \"21075007\",\n  candidateId: \"cand8\",\n  companyId: \"deloitte\",\n  type: \"against\",\n  amount: 900,\n  stake: \"2.75x\",\n  status: \"active\"\n}, {\n  userId: \"21075008\",\n  candidateId: \"cand9\",\n  companyId: \"microsoft\",\n  type: \"for\",\n  amount: 1200,\n  stake: \"2.30x\",\n  status: \"active\"\n}, {\n  userId: \"21075009\",\n  candidateId: \"cand10\",\n  companyId: \"hilabs\",\n  type: \"for\",\n  amount: 3000,\n  stake: \"1.41x\",\n  status: \"expired\"\n}];\n\n// Add sample results to expired companies so they show up in Expired Bets\n// This needs to be done after mockCandidates is fully initialized\nfunction addResultsToExpiredCompanies() {\n  mockExpiredCompanies.forEach(company => {\n    if (company.shortlist.length > 0) {\n      // Add results for some candidates (2-4 candidates per company)\n      const numResults = Math.min(4, Math.max(2, Math.floor(Math.random() * 3) + 2));\n      const candidatesWithResults = company.shortlist.slice(0, numResults);\n      company.candidates = candidatesWithResults.map((candidateId, index) => {\n        const candidate = mockCandidates.find(c => c.id === candidateId);\n        return {\n          enrollment: (candidate === null || candidate === void 0 ? void 0 : candidate.enrollment) || candidateId,\n          result: index < 2 ? 'selected' : 'not_selected' // First 2 selected, rest not selected\n        };\n      });\n    }\n  });\n}\n\n// Now add results to expired companies after everything is initialized\naddResultsToExpiredCompanies();\n\n// Admin-selected companies for homepage carousel (default to top 8 by tokens)\nexport let adminCarouselCompanyIds = [];\n\n// Initialize with top 8 companies by default\nfunction initializeCarouselCompanies() {\n  const totals = {};\n  mockBets.forEach(bet => {\n    if (!totals[bet.companyId]) totals[bet.companyId] = 0;\n    totals[bet.companyId] += Number(bet.amount) || 0;\n  });\n\n  // Sort company ids by total tokens bet, descending, and take top 8\n  adminCarouselCompanyIds = Object.entries(totals).sort((a, b) => b[1] - a[1]).slice(0, 8).map(([id]) => id);\n\n  // If no bets yet, use first 8 companies\n  if (adminCarouselCompanyIds.length === 0) {\n    adminCarouselCompanyIds = mockCompanies.slice(0, 8).map(c => c.id);\n  }\n}\n\n// Initialize carousel companies\ninitializeCarouselCompanies();","map":{"version":3,"names":["mockUsers","mockCompanies","id","name","role","shortlist","candidates","liveEventSection","logo","candidateNames","branches","randomEnrollment","idx","String","fromCharCode","getRandomBranch","Math","floor","random","length","getRandomShortlists","companyIds","n","shuffled","sort","slice","map","c","mahabharataNames","mahabharataCandidates","enrollment","toString","padStart","branch","shortlistedIn","course","includes","mockCandidates","mockExpiredCompanies","expiredCompanyIds","push","forEach","candidate","allCompanyIds","company","filter","currentShortlist","needed","notShortlisted","toAdd","mockExpiredBets","leaderboardUsers","verdicts","user","i","companies","candidateId","verdict","amount","userId","companyId","type","stake","toFixed","status","selectedMahabharata","cand","nonMahabharataCandidates","startsWith","extraNotSelected","find","nSelected","min","max","selectedCands","cid","bet","b","mockBets","addResultsToExpiredCompanies","numResults","candidatesWithResults","index","result","adminCarouselCompanyIds","initializeCarouselCompanies","totals","Number","Object","entries","a"],"sources":["D:/sattebaazi/frontend/src/mockData.js"],"sourcesContent":["import { mockUsers } from \"./mockUsers\";\n// Mock Companies\nexport const mockCompanies = [\n  { id: \"hilabs\", name: \"HiLabs\", role: \"Data Science\", shortlist: [], candidates: [], liveEventSection: \"data\", logo: \"\" },\n  { id: \"google\", name: \"Google\", role: \"Software Engineer\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  { id: \"amazon\", name: \"Amazon\", role: \"Operations Manager\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"flipkart\", name: \"Flipkart\", role: \"SDE\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  { id: \"meesho\", name: \"Meesho\", role: \"Product Manager\", shortlist: [], candidates: [], liveEventSection: \"product\", logo: \"\" },\n  { id: \"groww\", name: \"Groww\", role: \"Quant Analyst\", shortlist: [], candidates: [], liveEventSection: \"quant\", logo: \"\" },\n  { id: \"uber\", name: \"Uber\", role: \"Backend Developer\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  { id: \"deloitte\", name: \"Deloitte\", role: \"Analyst\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"microsoft\", name: \"Microsoft\", role: \"Cloud Engineer\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  // New mock companies\n  { id: \"infosys\", name: \"Infosys\", role: \"System Engineer\", shortlist: [], candidates: [], liveEventSection: \"core\", logo: \"\" },\n  { id: \"tcs\", name: \"TCS\", role: \"Consultant\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"wipro\", name: \"Wipro\", role: \"Data Analyst\", shortlist: [], candidates: [], liveEventSection: \"data\", logo: \"\" },\n  { id: \"adani\", name: \"Adani Group\", role: \"Project Engineer\", shortlist: [], candidates: [], liveEventSection: \"core\", logo: \"\" },\n  { id: \"reliance\", name: \"Reliance Industries\", role: \"Business Analyst\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"ola\", name: \"Ola Cabs\", role: \"AI Engineer\", shortlist: [], candidates: [], liveEventSection: \"data\", logo: \"\" },\n  { id: \"zomato\", name: \"Zomato\", role: \"Operations Lead\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"byjus\", name: \"BYJU'S\", role: \"EdTech Associate\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"paytm\", name: \"Paytm\", role: \"FinTech Developer\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  { id: \"swiggy\", name: \"Swiggy\", role: \"Logistics Manager\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n];\n\nconst candidateNames = [\n  // Cricket and famous personalities (existing)\n  \"Virat Kohli\", \"Rohit Sharma\", \"MS Dhoni\", \"Sachin Tendulkar\", \"Yuvraj Singh\", \"Sourav Ganguly\", \"Rahul Dravid\", \"Jasprit Bumrah\", \"Hardik Pandya\", \"Ravindra Jadeja\", \"KL Rahul\", \"Shikhar Dhawan\", \"Rishabh Pant\", \"Suryakumar Yadav\", \"Mohammed Shami\", \"Bhuvneshwar Kumar\", \"Harbhajan Singh\", \"Zaheer Khan\", \"Anil Kumble\", \"VVS Laxman\", \"Gautam Gambhir\", \"Ajinkya Rahane\", \"Cheteshwar Pujara\", \"Ishant Sharma\", \"Navdeep Saini\", \"Narendra Modi\", \"Yogi Adityanath\", \"Baba Ramdev\", \"The Great Khali\", \"Kapil Dev\", \"Sunil Gavaskar\", \"Mohinder Amarnath\", \"Syed Kirmani\", \"Kedar Jadhav\", \"Prithvi Shaw\", \"Sanju Samson\", \"Dinesh Karthik\", \"Manish Pandey\", \"Robin Uthappa\", \"Parthiv Patel\", \"Sreesanth\",\n  // Taarak Mehta Ka Ooltah Chashmah characters\n  \"Jethalal Gada\", \"Taarak Mehta\", \"Daya Gada\", \"Champaklal Gada\", \"Babita Iyer\", \"Iyer\", \"Aatmaram Bhide\", \"Madhavi Bhide\", \"Sonalika Sonu Bhide\", \"Popatlal Pandey\", \"Dr. Hathi\", \"Komal Hathi\", \"Goli Hathi\", \"Roshan Singh Sodhi\", \"Roshan Kaur Sodhi\", \"Gogi Sodhi\", \"Abdul\", \"Patrakaar Popatlal\", \"Rita Reporter\", \"Bagha\", \"Natu Kaka\", \"Baawri\", \"Sodhi\", \"Anjali Mehta\", \"Tapu\", \"Gogi\", \"Pinku\", \"Bapuji\"\n];\n\nconst branches = [\n  \"B.Tech. (Ceramic Engineering)\",\n  \"IDD (Ceramic Engineering)\",\n  \"B.Tech. (Chemical Engineering)\",\n  \"B.Tech. (Civil Engineering)\",\n  \"IDD (Civil Engineering)\",\n  \"B.Tech. (Computer Science and Engineering)\",\n  \"IDD (Computer Science and Engineering)\",\n  \"B.Tech. (Electrical Engineering)\",\n  \"IDD (Electrical Engineering)\",\n  \"B.Tech. (Electronics Engineering)\",\n  \"B.Tech. (Mechanical Engineering)\",\n  \"IDD (Mechanical Engineering)\",\n  \"B.Tech. (Metallurgical & Materials Engineering)\",\n  \"IDD (Metallurgical & Materials Engineering)\",\n  \"B.Tech. (Mining Engineering)\",\n  \"IDD (Mining Engineering)\",\n  \"B.Tech. (Pharmaceutical Engineering & Technology)\",\n  \"IDD (Pharmaceutical Engineering & Technology)\",\n  \"IDD (Engineering Physics)\",\n  \"IDD (Biochemical Engineering)\",\n  \"IDD (Biomedical Engineering)\",\n  \"IDD (Materials Science and Technology)\",\n  \"IDD (Decision Science and Engineering)\",\n  \"B.Arch. (Architecture)\"\n];\n\nfunction randomEnrollment(idx) {\n  return (21112000 + idx) + String.fromCharCode(97 + (idx % 5));\n}\n\nfunction getRandomBranch() {\n  return branches[Math.floor(Math.random() * branches.length)];\n}\n\n// Each candidate can have any number of shortlists (1 to all companies)\nfunction getRandomShortlists(companyIds) {\n  const n = Math.floor(Math.random() * companyIds.length) + 1;\n  const shuffled = [...companyIds].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, n);\n}\n\nconst companyIds = mockCompanies.map(c => c.id);\n\n// Mahabharata characters to add as candidates\nconst mahabharataNames = [\n  \"Arjuna\", \"Bhima\", \"Yudhishthira\", \"Nakula\", \"Sahadeva\", \"Karna\", \"Draupadi\", \"Duryodhana\", \"Shakuni\", \"Krishna\", \"Abhimanyu\", \"Ghatotkacha\", \"Ashwatthama\", \"Bhishma\", \"Dronacharya\", \"Vidura\", \"Kunti\", \"Gandhari\", \"Subhadra\", \"Ekalavya\"\n];\n\nconst mahabharataCandidates = mahabharataNames.map((name, idx) => {\n  const id = `candM${idx+1}`;\n  const enrollment = `21113M${(idx+1).toString().padStart(2,'0')}`;\n  const branch = branches[Math.floor(Math.random() * branches.length)];\n  // Give each 2-4 random shortlists from mockCompanies only for now\n  // We'll update this after expired companies are created\n  const n = 2 + Math.floor(Math.random()*3);\n  const shuffled = [...companyIds].sort(() => 0.5 - Math.random());\n  const shortlistedIn = shuffled.slice(0, n);\n  // Extract course from branch name\n  let course = \"B.Tech\";\n  if (branch.includes(\"IDD\")) {\n    course = \"IDD\";\n  } else if (branch.includes(\"M.Tech\")) {\n    course = \"M.Tech\";\n  } else if (branch.includes(\"Ph.D\")) {\n    course = \"Ph.D\";\n  } else if (branch.includes(\"B.Arch\")) {\n    course = \"B.Arch\";\n  }\n  return { id, name, enrollment, branch, course, shortlistedIn };\n});\n\nexport const mockCandidates = [\n  ...candidateNames.map((name, idx) => {\n    const id = `cand${idx + 1}`;\n    const enrollment = randomEnrollment(idx);\n    const branch = branches[Math.floor(Math.random() * branches.length)];\n    const shortlistedIn = getRandomShortlists(companyIds);\n    // Extract course from branch name\n    let course = \"B.Tech\";\n    if (branch.includes(\"IDD\")) {\n      course = \"IDD\";\n    } else if (branch.includes(\"M.Tech\")) {\n      course = \"M.Tech\";\n    } else if (branch.includes(\"Ph.D\")) {\n      course = \"Ph.D\";\n    } else if (branch.includes(\"B.Arch\")) {\n      course = \"B.Arch\";\n    }\n    return { id, name, enrollment, branch, course, shortlistedIn };\n  }),\n  ...mahabharataCandidates\n];\n\n// Companies only for expired bets (define after candidates)\nexport const mockExpiredCompanies = [\n  { id: \"squarepoint1\", name: \"SquarePoint Capital\", role: \"Graduate Software Developer\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  { id: \"squarepoint2\", name: \"SquarePoint Capital\", role: \"Infrastructure Engineer\", shortlist: [], candidates: [], liveEventSection: \"sde\", logo: \"\" },\n  { id: \"squarepoint3\", name: \"SquarePoint Capital\", role: \"Desk Quant Analyst\", shortlist: [], candidates: [], liveEventSection: \"quant\", logo: \"\" },\n  { id: \"goldmansachs\", name: \"Goldman Sachs\", role: \"Quantitative Analyst\", shortlist: [], candidates: [], liveEventSection: \"quant\", logo: \"\" },\n  { id: \"barclays\", name: \"Barclays\", role: \"Risk Analyst\", shortlist: [], candidates: [], liveEventSection: \"quant\", logo: \"\" },\n  { id: \"jpmorgan\", name: \"JP Morgan\", role: \"Investment Banking Analyst\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"bain\", name: \"Bain & Company\", role: \"Associate Consultant\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"bostonconsulting\", name: \"Boston Consulting Group\", role: \"Consultant\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n  { id: \"mckinsey\", name: \"McKinsey & Company\", role: \"Business Analyst\", shortlist: [], candidates: [], liveEventSection: \"misc\", logo: \"\" },\n];\n\nconst expiredCompanyIds = mockExpiredCompanies.map(c => c.id);\n\n// Add expired companies to the main companies array so they appear in the system\nmockCompanies.push(...mockExpiredCompanies);\n\n// Update mahabharata candidates to include expired companies in their shortlists\nmahabharataCandidates.forEach(candidate => {\n  const allCompanyIds = [...companyIds, ...expiredCompanyIds];\n  const n = 2 + Math.floor(Math.random()*3);\n  const shuffled = [...allCompanyIds].sort(() => 0.5 - Math.random());\n  candidate.shortlistedIn = shuffled.slice(0, n);\n});\n\n// Update company shortlists to include all candidates who have that company in their shortlistedIn\nmockCompanies.forEach(company => {\n  company.shortlist = mockCandidates.filter(c => c.shortlistedIn.includes(company.id)).map(c => c.id);\n});\nmockExpiredCompanies.forEach(company => {\n  company.shortlist = mockCandidates.filter(c => c.shortlistedIn.includes(company.id)).map(c => c.id);\n});\n\n// Ensure every expired company has at least 4-7 candidates shortlisted\nmockExpiredCompanies.forEach(company => {\n  let currentShortlist = company.shortlist;\n  const needed = 4 + Math.floor(Math.random() * 4); // 4-7\n  if (currentShortlist.length < needed) {\n    // Find candidates not already in shortlist\n    const notShortlisted = mockCandidates.filter(c => !currentShortlist.includes(c.id));\n    // Shuffle and pick as many as needed\n    const toAdd = notShortlisted.sort(() => 0.5 - Math.random()).slice(0, needed - currentShortlist.length);\n    company.shortlist = [...currentShortlist, ...toAdd.map(c => c.id)];\n  }\n});\n\n// Sample expired bets (with verdict) - will be replaced below\nexport let mockExpiredBets = [];\n\n// Use leaderboard (mockUsers) to distribute winnings/losings for expired bets\nconst leaderboardUsers = mockUsers.slice(0, 10); // Top 10 for demo\nconst verdicts = [\"selected\", \"not selected\"];\nleaderboardUsers.forEach((user, i) => {\n  // Each user bets on 1-2 expired companies, random candidate from shortlist\n  const companies = [mockExpiredCompanies[i % mockExpiredCompanies.length]];\n  companies.forEach(company => {\n    const shortlist = company.shortlist;\n    if (shortlist.length === 0) return;\n    const candidateId = shortlist[Math.floor(Math.random() * shortlist.length)];\n    const verdict = verdicts[i % 2];\n    const amount = 10000 + (i * 5000);\n    mockExpiredBets.push({\n      userId: user.id,\n      candidateId,\n      companyId: company.id,\n      type: \"for\",\n      amount,\n      stake: `${(1.2 + 0.1*i).toFixed(2)}x`,\n      status: \"expired\",\n      verdict\n    });\n  });\n});\n// Add some Mahabharata candidates as selected in mockExpiredBets\nconst selectedMahabharata = mahabharataCandidates.slice(0, 6); // First 6 selected\nselectedMahabharata.forEach((cand, i) => {\n  mockExpiredBets.push({\n    userId: `21075M${i+1}`,\n    candidateId: cand.id,\n    companyId: mockExpiredCompanies[i % mockExpiredCompanies.length].id,\n    type: \"for\",\n    amount: 3500 + i*200,\n    stake: `${(1.2 + 0.1*i).toFixed(2)}x`,\n    status: \"expired\",\n    verdict: \"selected\"\n  });\n});\n\n// Add some non-Mahabharata candidates as 'not selected' in expired bets if they are shortlisted in expired companies\nconst nonMahabharataCandidates = mockCandidates.filter(c => !c.id.startsWith('candM'));\nconst extraNotSelected = [\n  { name: 'Rohit Sharma', id: 'cand2' },\n  { name: 'Virat Kohli', id: 'cand1' },\n  { name: 'MS Dhoni', id: 'cand3' },\n  { name: 'Jethalal Gada', id: 'cand41' },\n  { name: 'Narendra Modi', id: 'cand25' },\n  { name: 'Babita Iyer', id: 'cand45' },\n];\nextraNotSelected.forEach((cand, i) => {\n  // Find an expired company where this candidate is shortlisted\n  const company = mockExpiredCompanies.find(c => c.shortlist.includes(cand.id));\n  if (company) {\n    mockExpiredBets.push({\n      userId: `21075E${i+1}`,\n      candidateId: cand.id,\n      companyId: company.id,\n      type: \"for\",\n      amount: 2000 + i*500,\n      stake: `${(1.15 + 0.07*i).toFixed(2)}x`,\n      status: \"expired\",\n      verdict: \"not selected\"\n    });\n  }\n});\n\n// Ensure multiple candidates are selected for each expired company\nmockExpiredCompanies.forEach(company => {\n  const shortlist = company.shortlist;\n  if (shortlist.length < 2) return;\n  // Pick 2-3 unique candidates from shortlist\n  const nSelected = Math.min(3, Math.max(2, Math.floor(Math.random() * 3) + 2, shortlist.length));\n  const shuffled = [...shortlist].sort(() => 0.5 - Math.random());\n  const selectedCands = shuffled.slice(0, nSelected);\n  selectedCands.forEach(cid => {\n    // Check if a bet already exists for this candidate/company\n    let bet = mockExpiredBets.find(b => b.companyId === company.id && b.candidateId === cid);\n    if (bet) {\n      bet.verdict = 'selected';\n    } else {\n      mockExpiredBets.push({\n        userId: `21075S${cid}`,\n        candidateId: cid,\n        companyId: company.id,\n        type: \"for\",\n        amount: 2500 + Math.floor(Math.random()*2000),\n        stake: `${(1.15 + Math.random()*0.5).toFixed(2)}x`,\n        status: \"expired\",\n        verdict: \"selected\"\n      });\n    }\n  });\n});\n\n// Sample Bets\nexport const mockBets = [\n  { userId: \"21075001\", candidateId: \"cand1\", companyId: \"hilabs\", type: \"for\", amount: 2000, stake: \"1.29x\", status: \"active\" },\n  { userId: \"21075001\", candidateId: \"cand2\", companyId: \"google\", type: \"against\", amount: 1500, stake: \"2.10x\", status: \"active\" },\n  { userId: \"21075002\", candidateId: \"cand3\", companyId: \"amazon\", type: \"for\", amount: 1000, stake: \"1.75x\", status: \"expired\" },\n  { userId: \"21075003\", candidateId: \"cand4\", companyId: \"flipkart\", type: \"for\", amount: 2500, stake: \"1.35x\", status: \"active\" },\n  { userId: \"21075004\", candidateId: \"cand5\", companyId: \"meesho\", type: \"against\", amount: 1800, stake: \"3.44x\", status: \"active\" },\n  { userId: \"21075005\", candidateId: \"cand6\", companyId: \"groww\", type: \"for\", amount: 2200, stake: \"1.49x\", status: \"expired\" },\n  { userId: \"21075006\", candidateId: \"cand7\", companyId: \"uber\", type: \"for\", amount: 1700, stake: \"1.80x\", status: \"active\" },\n  { userId: \"21075007\", candidateId: \"cand8\", companyId: \"deloitte\", type: \"against\", amount: 900, stake: \"2.75x\", status: \"active\" },\n  { userId: \"21075008\", candidateId: \"cand9\", companyId: \"microsoft\", type: \"for\", amount: 1200, stake: \"2.30x\", status: \"active\" },\n  { userId: \"21075009\", candidateId: \"cand10\", companyId: \"hilabs\", type: \"for\", amount: 3000, stake: \"1.41x\", status: \"expired\" },\n];\n\n// Add sample results to expired companies so they show up in Expired Bets\n// This needs to be done after mockCandidates is fully initialized\nfunction addResultsToExpiredCompanies() {\n  mockExpiredCompanies.forEach(company => {\n    if (company.shortlist.length > 0) {\n      // Add results for some candidates (2-4 candidates per company)\n      const numResults = Math.min(4, Math.max(2, Math.floor(Math.random() * 3) + 2));\n      const candidatesWithResults = company.shortlist.slice(0, numResults);\n      \n      company.candidates = candidatesWithResults.map((candidateId, index) => {\n        const candidate = mockCandidates.find(c => c.id === candidateId);\n        return {\n          enrollment: candidate?.enrollment || candidateId,\n          result: index < 2 ? 'selected' : 'not_selected' // First 2 selected, rest not selected\n        };\n      });\n    }\n  });\n}\n\n// Now add results to expired companies after everything is initialized\naddResultsToExpiredCompanies(); \n\n// Admin-selected companies for homepage carousel (default to top 8 by tokens)\nexport let adminCarouselCompanyIds = [];\n\n// Initialize with top 8 companies by default\nfunction initializeCarouselCompanies() {\n  const totals = {};\n  mockBets.forEach(bet => {\n    if (!totals[bet.companyId]) totals[bet.companyId] = 0;\n    totals[bet.companyId] += Number(bet.amount) || 0;\n  });\n  \n  // Sort company ids by total tokens bet, descending, and take top 8\n  adminCarouselCompanyIds = Object.entries(totals)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 8)\n    .map(([id]) => id);\n    \n  // If no bets yet, use first 8 companies\n  if (adminCarouselCompanyIds.length === 0) {\n    adminCarouselCompanyIds = mockCompanies.slice(0, 8).map(c => c.id);\n  }\n}\n\n// Initialize carousel companies\ninitializeCarouselCompanies(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}