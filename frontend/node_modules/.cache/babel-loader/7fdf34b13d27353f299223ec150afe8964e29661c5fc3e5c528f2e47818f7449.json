{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: this.getHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'API request failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Auth endpoints\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    const data = await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    this.setToken(data.token);\n    return data;\n  }\n  async getProfile() {\n    return this.request('/auth/profile');\n  }\n\n  // Company endpoints\n  async getCompanies() {\n    return this.request('/companies');\n  }\n  async getCompany(id) {\n    return this.request(`/companies/${id}`);\n  }\n  async createCompany(companyData) {\n    return this.request('/companies', {\n      method: 'POST',\n      body: JSON.stringify(companyData)\n    });\n  }\n  async updateCompany(id, companyData) {\n    return this.request(`/companies/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(companyData)\n    });\n  }\n  async deleteCompany(id) {\n    return this.request(`/companies/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async getCompaniesBySection(section) {\n    return this.request(`/companies/section/${section}`);\n  }\n\n  // Candidate endpoints\n  async getCandidates() {\n    return this.request('/candidates');\n  }\n  async getCandidate(id) {\n    return this.request(`/candidates/${id}`);\n  }\n  async createCandidate(candidateData) {\n    return this.request('/candidates', {\n      method: 'POST',\n      body: JSON.stringify(candidateData)\n    });\n  }\n  async updateCandidate(id, candidateData) {\n    return this.request(`/candidates/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(candidateData)\n    });\n  }\n  async deleteCandidate(id) {\n    return this.request(`/candidates/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async getCandidatesByCompany(companyId) {\n    return this.request(`/candidates/company/${companyId}`);\n  }\n  async getCandidatesByBranch(branch) {\n    return this.request(`/candidates/branch/${branch}`);\n  }\n\n  // Bet endpoints\n  async getBets() {\n    return this.request('/bets');\n  }\n  async getMyBets() {\n    return this.request('/bets/my-bets');\n  }\n  async getActiveBets() {\n    return this.request('/bets/active');\n  }\n  async getExpiredBets() {\n    return this.request('/bets/expired');\n  }\n  async placeBet(betData) {\n    return this.request('/bets', {\n      method: 'POST',\n      body: JSON.stringify(betData)\n    });\n  }\n  async updateBetStatus(id, statusData) {\n    return this.request(`/bets/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify(statusData)\n    });\n  }\n  async getBet(id) {\n    return this.request(`/bets/${id}`);\n  }\n\n  // Stats endpoints\n  async getLeaderboard() {\n    return this.request('/stats/leaderboard');\n  }\n  async getUserStats(userId) {\n    return this.request(`/stats/user-stats/${userId}`);\n  }\n  async getOverallStats() {\n    return this.request('/stats/overall-stats');\n  }\n  async getCompanyStats(companyId) {\n    return this.request(`/stats/company-stats/${companyId}`);\n  }\n  async getBettingTrends() {\n    return this.request('/stats/betting-trends');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","token","localStorage","getItem","setToken","setItem","clearToken","removeItem","getHeaders","headers","request","endpoint","options","url","config","response","fetch","data","json","ok","Error","message","error","console","register","userData","method","body","JSON","stringify","login","credentials","getProfile","getCompanies","getCompany","id","createCompany","companyData","updateCompany","deleteCompany","getCompaniesBySection","section","getCandidates","getCandidate","createCandidate","candidateData","updateCandidate","deleteCandidate","getCandidatesByCompany","companyId","getCandidatesByBranch","branch","getBets","getMyBets","getActiveBets","getExpiredBets","placeBet","betData","updateBetStatus","statusData","getBet","getLeaderboard","getUserStats","userId","getOverallStats","getCompanyStats","getBettingTrends"],"sources":["D:/sattebaazi/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.token = localStorage.getItem('token');\r\n  }\r\n\r\n  setToken(token) {\r\n    this.token = token;\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  clearToken() {\r\n    this.token = null;\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  getHeaders() {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n    if (this.token) {\r\n      headers['Authorization'] = `Bearer ${this.token}`;\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const config = {\r\n      headers: this.getHeaders(),\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'API request failed');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    const data = await this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    this.setToken(data.token);\r\n    return data;\r\n  }\r\n\r\n  async getProfile() {\r\n    return this.request('/auth/profile');\r\n  }\r\n\r\n  // Company endpoints\r\n  async getCompanies() {\r\n    return this.request('/companies');\r\n  }\r\n\r\n  async getCompany(id) {\r\n    return this.request(`/companies/${id}`);\r\n  }\r\n\r\n  async createCompany(companyData) {\r\n    return this.request('/companies', {\r\n      method: 'POST',\r\n      body: JSON.stringify(companyData),\r\n    });\r\n  }\r\n\r\n  async updateCompany(id, companyData) {\r\n    return this.request(`/companies/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(companyData),\r\n    });\r\n  }\r\n\r\n  async deleteCompany(id) {\r\n    return this.request(`/companies/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async getCompaniesBySection(section) {\r\n    return this.request(`/companies/section/${section}`);\r\n  }\r\n\r\n  // Candidate endpoints\r\n  async getCandidates() {\r\n    return this.request('/candidates');\r\n  }\r\n\r\n  async getCandidate(id) {\r\n    return this.request(`/candidates/${id}`);\r\n  }\r\n\r\n  async createCandidate(candidateData) {\r\n    return this.request('/candidates', {\r\n      method: 'POST',\r\n      body: JSON.stringify(candidateData),\r\n    });\r\n  }\r\n\r\n  async updateCandidate(id, candidateData) {\r\n    return this.request(`/candidates/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(candidateData),\r\n    });\r\n  }\r\n\r\n  async deleteCandidate(id) {\r\n    return this.request(`/candidates/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async getCandidatesByCompany(companyId) {\r\n    return this.request(`/candidates/company/${companyId}`);\r\n  }\r\n\r\n  async getCandidatesByBranch(branch) {\r\n    return this.request(`/candidates/branch/${branch}`);\r\n  }\r\n\r\n  // Bet endpoints\r\n  async getBets() {\r\n    return this.request('/bets');\r\n  }\r\n\r\n  async getMyBets() {\r\n    return this.request('/bets/my-bets');\r\n  }\r\n\r\n  async getActiveBets() {\r\n    return this.request('/bets/active');\r\n  }\r\n\r\n  async getExpiredBets() {\r\n    return this.request('/bets/expired');\r\n  }\r\n\r\n  async placeBet(betData) {\r\n    return this.request('/bets', {\r\n      method: 'POST',\r\n      body: JSON.stringify(betData),\r\n    });\r\n  }\r\n\r\n  async updateBetStatus(id, statusData) {\r\n    return this.request(`/bets/${id}/status`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(statusData),\r\n    });\r\n  }\r\n\r\n  async getBet(id) {\r\n    return this.request(`/bets/${id}`);\r\n  }\r\n\r\n  // Stats endpoints\r\n  async getLeaderboard() {\r\n    return this.request('/stats/leaderboard');\r\n  }\r\n\r\n  async getUserStats(userId) {\r\n    return this.request(`/stats/user-stats/${userId}`);\r\n  }\r\n\r\n  async getOverallStats() {\r\n    return this.request('/stats/overall-stats');\r\n  }\r\n\r\n  async getCompanyStats(companyId) {\r\n    return this.request(`/stats/company-stats/${companyId}`);\r\n  }\r\n\r\n  async getBettingTrends() {\r\n    return this.request('/stats/betting-trends');\r\n  }\r\n}\r\n\r\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}